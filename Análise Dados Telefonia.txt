# Move arquivos locais para o HDFS para uso do Spark

hdfs dfs -copyFromLocal /home/cloudera/Downloads/customer_churn.csv /user/cloudera/curso_spark/

val customerRdd = sc.textFile("/user/cloudera/curso_spark/customer_churn.csv")

# analisa dados importados
customerRdd.count
customerRdd.take(2)

# Retorna Estados Unicos
customerRdd.map(x=>x.split(","))
customerRdd.map(x=>x.split(",")).map(x=>x(0)).take(10)
customerRdd.map(x=>x.split(",")).map(x=>x(0)).distinct

# Lista apenas os Estados unicos com 2 caracteres
customerRdd.map(x=>x.split(",")).map(x=>x(0)).distinct.filter(x=>x.length == 2).collect


# Analisa estatisticas sobre o total days calls

customerRdd.map(x=>x.split(",")).map(x=>x(8))
val headerLine=customerRdd.take(1)(0)
val customerRddSemHead = customerRdd.filter(eachLine => eachLine != headerLine).collect
customerRddSemHead.map(x=>x.split(",")).map(x=>x(8).toInt).min
customerRddSemHead.map(x=>x.split(",")).map(x=>x(8).toInt).max

# Traz estatisticas de voice mail plan para Estados especificos
customerRddSemHead.map(x=>x.split(",")).filter(x=>x(0) == "OH" | x(0) == "OK" | x(0) == "RI").map(x=>x(6)).max

# Calcula media de tempo de ligacoes noturnas

customerRdd.filter(eachLine => eachLine != headerLine).map(x=>x.split(",")).map(x=>x(13)).collect
val qtdElementos = customerRdd.filter(eachLine => eachLine != headerLine).map(x=>x.split(",")).map(x=>x(13)).count
val somaElementos = customerRdd.filter(eachLine => eachLine != headerLine).map(x=>x.split(",")).map(x=>x(13).toDouble).sum

val mediaLigacoesNoturnas = somaElementos / qtdElementos

# Encontra o total de day calls de clientes not churned dos Estados OH e NY

customerRdd.filter(eachLine => eachLine != headerLine).map(x=>x.split(",")).filter(x => x(20) == "FALSE" & (x(0) == "OH" | x(0) == "NY")).map(x=>x(8)).count
customerRdd.filter(eachLine => eachLine != headerLine).map(x=>x.split(",")).filter(x => x(20) == "FALSE").filter(x=>x(0) == "OH" | x(0) == "NY").map(x=>x(8).toInt).count

# Retorna clientes onde ha informacao de international plan field

customerRdd.filter(eachLine => eachLine != headerLine).map(x=>x.split(",")).filter(x => x(4) == "yes" | x(4) == "no").map(x=>x(4)).collect

# Retorna quantidade de clientes churned que tenham voice plan e international plan

customerRdd.filter(eachLine => eachLine != headerLine).map(x=>x.split(",")).filter(x => x(20) == "TRUE" & x(4) == "yes" & x(5) == "yes").count

# Verifica se ha algum parametro que nao seja integer



def checkColumnInteger(givenParam:String):Boolean={
	val intergerPattern="[0-9]*".r
	givenParam match {
	case intergerPattern()=>true
	case _ => false
	}
	}

customerRdd.filter(eachLine => eachLine != headerLine).map(x=>x.split(",")).filter(x => checkColumnInteger(x(8))).count
customerRdd.filter(eachLine => eachLine != headerLine).count